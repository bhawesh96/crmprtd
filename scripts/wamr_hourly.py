#!/usr/bin/env python

'''
Script to download data from the BC Ministry of Environment Air Quality Branch

Water and Air Monitoring and Reporting? (WAMR)

This is largely lifted and modified from the hourly_wmb.py script
'''


from argparse import ArgumentParser
from pkg_resources import resource_stream

# Local
from crmprtd.wamr.download import download
from crmprtd.wamr.normalize import normalize
from crmprtd.wamr import setup_logging
from itertools import tee


if __name__ == '__main__':
    # Process the command line arguments
    parser = ArgumentParser()
    # FTP options
    parser.add_argument('-f', '--ftp_server',
                        default='ftp.env.gov.bc.ca',
                        help=('Full hostname of Water and Air Monitoring and '
                              'Reporting\'s ftp server'))
    parser.add_argument('-F', '--ftp_dir',
                        default=('pub/outgoing/AIR/Hourly_Raw_Air_Data/'
                                 'Meteorological/'),
                        help='FTP Directory containing WAMR\'s data files')

    # File output options
    parser.add_argument('-h', '--cache_file',
                        default=None,
                        help=('Full path of file in which to put downloaded '
                              'observations (--cache_dir will be ignored)'))
    parser.add_argument('-e', '--error_file',
                        default=None,
                        help=('Full path of file in which to put data that '
                              'could not be added to the database '
                              '(--error_dir will be ignored)'))
    parser.add_argument('-E', '--error_dir',
                        default='./',
                        help=('Directory in which to put data that could not '
                              'be added to the database '
                              '(filename will be autogenerated)'))

    args = parser.parse_args()
    log = setup_logging(args.log_level, args.log, args.error_email)

    download_iter = download(args)

    if args.cache_file:
        download_iter, cache_iter = tee(download_iter)
        with open(args.cache_file, 'w') as f:
            for chunk in cache_iter:
                f.write(chunk)

    for row in normalize(download_iter):
        print(row)
